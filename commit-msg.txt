🔧 重構答題分佈數據獲取邏輯

🚀 核心改進：
1. **分離式查詢**：
   - 先獲取答題記錄 (answer_records)
   - 再獲取用戶資料 (users)
   - 避免複雜的 JOIN 查詢問題

2. **數據處理優化**：
   - 使用 Map 建立用戶查找索引
   - 確保數據映射的準確性
   - 過濾無效用戶記錄

🔍 問題診斷：
- 原本使用 `users!inner()` JOIN 可能導致數據結構問題
- 新方法使用分步查詢確保數據完整性
- 添加詳細日誌追蹤數據流

💡 技術實現：
```typescript
// Before: 複雜的 JOIN 查詢
const { data: answers, error } = await supabase
  .from('answer_records')
  .select(`
    answer,
    users!inner(display_name, avatar_url)
  `)
  .eq('question_id', currentQuestion.id)

// After: 分離式查詢
// 1. 獲取答題記錄
const { data: answerRecords, error: answerError } = await supabase
  .from('answer_records')
  .select('answer, line_id')
  .eq('question_id', currentQuestion.id)

// 2. 獲取用戶資料
const lineIds = [...new Set(answerRecords.map(record => record.line_id))]
const { data: users, error: usersError } = await supabase
  .from('users')
  .select('line_id, display_name, avatar_url')
  .in('line_id', lineIds)

// 3. 建立映射並處理數據
const userMap = new Map()
users?.forEach(user => {
  userMap.set(user.line_id, user)
})
```

📊 數據處理改進：
1. **用戶映射**：使用 Map 提高查找效率
2. **數據驗證**：過濾無效用戶記錄
3. **空狀態處理**：正確處理沒有答題記錄的情況
4. **調試支援**：詳細的日誌記錄

🎯 預期效果：
- ✅ 準確顯示每個選項的答題人數
- ✅ 正確計算百分比
- ✅ 正常顯示玩家頭像和姓名
- ✅ 解決數據結構不一致問題
- ✅ 提供詳細的調試信息
